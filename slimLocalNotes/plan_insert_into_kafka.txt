

81 rows selected (0.545 seconds)
0: jdbc:hive2://localhost:10053> set explain_level=extended;
No rows affected (0.016 seconds)
0: jdbc:hive2://localhost:10053> Set hive.explain.user=true;
No rows affected (0.007 seconds)
0: jdbc:hive2://localhost:10053> explain From kafka_table ktable join kafka_table_offsets offset_table on (ktable.`__partition` = offset_table.partition_id and ktable.`__offset` > offset_table.max_offset )
. . . . . . . . . . . . . . . .> insert into table orc_kafka_table select ktable.`__partition`, `__offset`, `timestamp` ,page , `user`, language, added, deleted, flags,comment , namespace
. . . . . . . . . . . . . . . .> Insert overwrite table kafka_table_offsets select `__partition`, max(`__offset`), CURRENT_TIMESTAMP group by `__partition`, CURRENT_TIMESTAMP
. . . . . . . . . . . . . . . .> ;
+----------------------------------------------------+
|                      Explain                       |
+----------------------------------------------------+
| Plan optimized by CBO.                             |
|                                                    |
| Vertex dependency in root stage                    |
| Map 1 <- Map 5 (BROADCAST_EDGE)                    |
| Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)            |
| Reducer 3 <- Map 1 (SIMPLE_EDGE)                   |
| Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)        |
|                                                    |
| Stage-4                                            |
|   Stats Work{}                                     |
|     Stage-0                                        |
|       Move Operator                                |
|         table:{"name:":"test_kafka_slim.orc_kafka_table"} |
|         Stage-3                                    |
|           Dependency Collection{}                  |
|             Stage-2                                |
|               Reducer 2 llap                       |
|               File Output Operator [FS_19]         |
|                 Group By Operator [GBY_17] (rows=1 width=4840) |
|                   Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["compute_stats(VALUE._col0)","compute_stats(VALUE._col1)","compute_stats(VALUE._col2)","compute_stats(VALUE._col3)","compute_stats(VALUE._col4)","compute_stats(VALUE._col5)","compute_stats(VALUE._col6)","compute_stats(VALUE._col7)","compute_stats(VALUE._col8)","compute_stats(VALUE._col9)","compute_stats(VALUE._col10)"] |
|                 <-Map 1 [CUSTOM_SIMPLE_EDGE] llap  |
|                   SHUFFLE [RS_16]                  |
|                     Group By Operator [GBY_15] (rows=1 width=4760) |
|                       Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["compute_stats(partition_id, 'hll')","compute_stats(row_offset, 'hll')","compute_stats(timestamp, 'hll')","compute_stats(page, 'hll')","compute_stats(user, 'hll')","compute_stats(language, 'hll')","compute_stats(added, 'hll')","compute_stats(deleted, 'hll')","compute_stats(flags, 'hll')","compute_stats(comment, 'hll')","compute_stats(namespace, 'hll')"] |
|                       Select Operator [SEL_14] (rows=1 width=1280) |
|                         Output:["partition_id","row_offset","timestamp","page","user","language","added","deleted","flags","comment","namespace"] |
|                         Select Operator [SEL_11] (rows=1 width=1280) |
|                           Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"] |
|                           Select Operator [SEL_10] (rows=1 width=1280) |
|                             Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"] |
|                             Filter Operator [FIL_9] (rows=1 width=1280) |
|                               predicate:(_col10 > _col12) |
|                               Map Join Operator [MAPJOIN_37] (rows=1 width=1280) |
|                                 Conds:SEL_2._col9=RS_41._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col12"] |
|                               <-Map 5 [BROADCAST_EDGE] vectorized, llap |
|                                 BROADCAST [RS_41]  |
|                                   PartitionCols:_col0 |
|                                   Select Operator [SEL_40] (rows=1 width=12) |
|                                     Output:["_col0","_col1"] |
|                                     Filter Operator [FIL_39] (rows=1 width=12) |
|                                       predicate:partition_id is not null |
|                                       TableScan [TS_3] (rows=1 width=12) |
|                                         test_kafka_slim@kafka_table_offsets,offset_table,Tbl:COMPLETE,Col:COMPLETE,Output:["partition_id","max_offset"] |
|                               <-Select Operator [SEL_2] (rows=1 width=1164) |
|                                   Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"] |
|                                   Filter Operator [FIL_35] (rows=1 width=1164) |
|                                     predicate:__partition is not null |
|                                     TableScan [TS_0] (rows=1 width=1164) |
|                                       test_kafka_slim@kafka_table,ktable,Tbl:COMPLETE,Col:NONE,Output:["timestamp","page","user","language","added","deleted","flags","comment","namespace","__partition","__offset"] |
|               Reducer 4 llap                       |
|               File Output Operator [FS_32]         |
|                 Group By Operator [GBY_30] (rows=1 width=1320) |
|                   Output:["_col0","_col1","_col2"],aggregations:["compute_stats(VALUE._col0)","compute_stats(VALUE._col1)","compute_stats(VALUE._col2)"] |
|                 <-Reducer 3 [CUSTOM_SIMPLE_EDGE] llap |
|                   File Output Operator [FS_25]     |
|                     table:{"name:":"test_kafka_slim.kafka_table_offsets"} |
|                     Select Operator [SEL_24] (rows=1 width=1280) |
|                       Output:["_col0","_col1","_col2"] |
|                       Group By Operator [GBY_23] (rows=1 width=1280) |
|                         Output:["_col0","_col1","_col2"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1 |
|                       <-Map 1 [SIMPLE_EDGE] llap   |
|                         SHUFFLE [RS_22]            |
|                           PartitionCols:_col0, _col1 |
|                           Group By Operator [GBY_21] (rows=1 width=1280) |
|                             Output:["_col0","_col1","_col2"],aggregations:["max(_col5)"],keys:_col1, CURRENT_TIMESTAMP() |
|                             Select Operator [SEL_20] (rows=1 width=1280) |
|                               Output:["_col1","_col5"] |
|                                Please refer to the previous Select Operator [SEL_10] |
|                   PARTITION_ONLY_SHUFFLE [RS_29]   |
|                     Group By Operator [GBY_28] (rows=1 width=1272) |
|                       Output:["_col0","_col1","_col2"],aggregations:["compute_stats(partition_id, 'hll')","compute_stats(max_offset, 'hll')","compute_stats(insert_time, 'hll')"] |
|                       Select Operator [SEL_27] (rows=1 width=1280) |
|                         Output:["partition_id","max_offset","insert_time"] |
|                          Please refer to the previous Select Operator [SEL_24] |
| Stage-5                                            |
|   Stats Work{}                                     |
|     Stage-1                                        |
|       Move Operator                                |
|         table:{"name:":"test_kafka_slim.kafka_table_offsets"} |
|          Please refer to the previous Stage-3      |
|                                                    |
+----------------------------------------------------+
81 rows selected (0.567 seconds)
0: jdbc:hive2://localhost:10053> explain logical From kafka_table ktable join kafka_table_offsets offset_table on (ktable.`__partition` = offset_table.partition_id and ktable.`__offset` > offset_table.max_offset )
. . . . . . . . . . . . . . . .> insert into table orc_kafka_table select ktable.`__partition`, `__offset`, `timestamp` ,page , `user`, language, added, deleted, flags,comment , namespace
. . . . . . . . . . . . . . . .> Insert overwrite table kafka_table_offsets select `__partition`, max(`__offset`), CURRENT_TIMESTAMP group by `__partition`, CURRENT_TIMESTAMP
. . . . . . . . . . . . . . . .> ;
+----------------------------------------------------+
|                      Explain                       |
+----------------------------------------------------+
| LOGICAL PLAN:                                      |
| subq:$hdt$_0:ktable                                |
|   TableScan (TS_0)                                 |
|     alias: ktable                                  |
|     filterExpr: (__partition is not null and (__partition) IN (RS[7])) (type: boolean) |
|     Filter Operator (FIL_35)                       |
|       predicate: (__partition is not null and (__partition) IN (RS[7])) (type: boolean) |
|       Select Operator (SEL_2)                      |
|         expressions: timestamp (type: timestamp), page (type: string), user (type: string), language (type: string), added (type: int), deleted (type: int), flags (type: string), comment (type: string), namespace (type: string), __partition (type: int), __offset (type: bigint) |
|         outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10 |
|         Reduce Output Operator (RS_6)              |
|           key expressions: _col9 (type: int)       |
|           sort order: +                            |
|           Map-reduce partition columns: _col9 (type: int) |
|           value expressions: _col0 (type: timestamp), _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: int), _col5 (type: int), _col6 (type: string), _col7 (type: string), _col8 (type: string), _col10 (type: bigint) |
|           Join Operator (JOIN_8)                   |
|             condition map:                         |
|                  Inner Join 0 to 1                 |
|             keys:                                  |
|               0 _col9 (type: int)                  |
|               1 _col0 (type: int)                  |
|             outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col12 |
|             Filter Operator (FIL_9)                |
|               predicate: (_col10 > _col12) (type: boolean) |
|               Select Operator (SEL_10)             |
|                 expressions: _col5 (type: int), _col9 (type: int), _col9 (type: int), _col3 (type: string), _col1 (type: string), _col10 (type: bigint), _col8 (type: string), _col4 (type: int), _col6 (type: string), _col0 (type: timestamp), _col2 (type: string), _col7 (type: string) |
|                 outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11 |
|                 Select Operator (SEL_11)           |
|                   expressions: _col2 (type: int), _col5 (type: bigint), _col9 (type: timestamp), _col4 (type: string), _col10 (type: string), _col3 (type: string), _col7 (type: int), _col0 (type: int), _col8 (type: string), _col11 (type: string), _col6 (type: string) |
|                   outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10 |
|                   File Output Operator (FS_12)     |
|                     compressed: false              |
|                     table:                         |
|                         input format: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat |
|                         output format: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat |
|                         serde: org.apache.hadoop.hive.ql.io.orc.OrcSerde |
|                         name: test_kafka_slim.orc_kafka_table |
|                   Select Operator (SEL_14)         |
|                     expressions: _col0 (type: int), _col1 (type: bigint), _col2 (type: timestamp), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int), _col7 (type: int), _col8 (type: string), _col9 (type: string), _col10 (type: string) |
|                     outputColumnNames: partition_id, row_offset, timestamp, page, user, language, added, deleted, flags, comment, namespace |
|                     Group By Operator (GBY_15)     |
|                       aggregations: compute_stats(partition_id, 'hll'), compute_stats(row_offset, 'hll'), compute_stats(timestamp, 'hll'), compute_stats(page, 'hll'), compute_stats(user, 'hll'), compute_stats(language, 'hll'), compute_stats(added, 'hll'), compute_stats(deleted, 'hll'), compute_stats(flags, 'hll'), compute_stats(comment, 'hll'), compute_stats(namespace, 'hll') |
|                       mode: hash                   |
|                       outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10 |
|                       Reduce Output Operator (RS_16) |
|                         sort order:                |
|                         value expressions: _col0 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col3 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col4 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col5 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col6 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col7 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col8 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col9 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>), _col10 (type: struct<columntype:string,maxlength:bigint,sumlength:bigint,count:bigint,countnulls:bigint,bitvector:binary>) |
|                         Group By Operator (GBY_17) |
|                           aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2), compute_stats(VALUE._col3), compute_stats(VALUE._col4), compute_stats(VALUE._col5), compute_stats(VALUE._col6), compute_stats(VALUE._col7), compute_stats(VALUE._col8), compute_stats(VALUE._col9), compute_stats(VALUE._col10) |
|                           mode: mergepartial       |
|                           outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10 |
|                           File Output Operator (FS_19) |
|                             compressed: false      |
|                             table:                 |
|                                 input format: org.apache.hadoop.mapred.SequenceFileInputFormat |
|                                 output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat |
|                                 serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe |
|                 Select Operator (SEL_20)           |
|                   expressions: _col1 (type: int), _col5 (type: bigint) |
|                   outputColumnNames: _col1, _col5  |
|                   Group By Operator (GBY_21)       |
|                     aggregations: max(_col5)       |
|                     keys: _col1 (type: int), CURRENT_TIMESTAMP() (type: timestamp) |
|                     mode: hash                     |
|                     outputColumnNames: _col0, _col1, _col2 |
|                     Reduce Output Operator (RS_22) |
|                       key expressions: _col0 (type: int), _col1 (type: timestamp) |
|                       sort order: ++               |
|                       Map-reduce partition columns: _col0 (type: int), _col1 (type: timestamp) |
|                       value expressions: _col2 (type: bigint) |
|                       Group By Operator (GBY_23)   |
|                         aggregations: max(VALUE._col0) |
|                         keys: KEY._col0 (type: int), KEY._col1 (type: timestamp) |
|                         mode: mergepartial         |
|                         outputColumnNames: _col0, _col1, _col2 |
|                         Select Operator (SEL_24)   |
|                           expressions: _col0 (type: int), _col2 (type: bigint), _col1 (type: timestamp) |
|                           outputColumnNames: _col0, _col1, _col2 |
|                           File Output Operator (FS_25) |
|                             compressed: false      |
|                             table:                 |
|                                 input format: org.apache.hadoop.mapred.TextInputFormat |
|                                 output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat |
|                                 serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe |
|                                 name: test_kafka_slim.kafka_table_offsets |
|                           Select Operator (SEL_27) |
|                             expressions: _col0 (type: int), _col1 (type: bigint), _col2 (type: timestamp) |
|                             outputColumnNames: partition_id, max_offset, insert_time |
|                             Group By Operator (GBY_28) |
|                               aggregations: compute_stats(partition_id, 'hll'), compute_stats(max_offset, 'hll'), compute_stats(insert_time, 'hll') |
|                               mode: hash           |
|                               outputColumnNames: _col0, _col1, _col2 |
|                               Reduce Output Operator (RS_29) |
|                                 sort order:        |
|                                 value expressions: _col0 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col1 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>), _col2 (type: struct<columntype:string,min:bigint,max:bigint,countnulls:bigint,bitvector:binary>) |
|                                 Group By Operator (GBY_30) |
|                                   aggregations: compute_stats(VALUE._col0), compute_stats(VALUE._col1), compute_stats(VALUE._col2) |
|                                   mode: mergepartial |
|                                   outputColumnNames: _col0, _col1, _col2 |
|                                   File Output Operator (FS_32) |
+----------------------------------------------------+
|                      Explain                       |
+----------------------------------------------------+
|                                     compressed: false |
|                                     table:         |
|                                         input format: org.apache.hadoop.mapred.SequenceFileInputFormat |
|                                         output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat |
|                                         serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe |
| subq:$hdt$_1:offset_table                          |
|   TableScan (TS_3)                                 |
|     alias: offset_table                            |
|     filterExpr: (partition_id is not null and (partition_id) IN (RS[6])) (type: boolean) |
|     Filter Operator (FIL_36)                       |
|       predicate: (partition_id is not null and (partition_id) IN (RS[6])) (type: boolean) |
|       Select Operator (SEL_5)                      |
|         expressions: partition_id (type: int), max_offset (type: bigint) |
|         outputColumnNames: _col0, _col1            |
|         Reduce Output Operator (RS_7)              |
|           key expressions: _col0 (type: int)       |
|           sort order: +                            |
|           Map-reduce partition columns: _col0 (type: int) |
|           value expressions: _col1 (type: bigint)  |
|           Join Operator (JOIN_8)                   |
|             condition map:                         |
|                  Inner Join 0 to 1                 |
|             keys:                                  |
|               0 _col9 (type: int)                  |
|               1 _col0 (type: int)                  |
|             outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col12 |
|                                                    |
+----------------------------------------------------+