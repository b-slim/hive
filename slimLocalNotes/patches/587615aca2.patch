commit 587615aca2f2167153f0339cac1d6477f5482cab
Author: Slim Bouguerra <bslim@apache.org>
Date:   Fri Apr 5 15:12:34 2019 -0700

    change the way how we count the number of attempts
    and some minor refactoring
    
    Change-Id: I9a954092fe847fcba97932a43ea6315d45fdda1e

diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
index 07aa9e2773..753e61a986 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
@@ -293,6 +293,7 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
 
     // The way to get around this is by retrying and force evicting if needed.
 
+    metrics.incrAllocationAttempt(1);
     while (attempt < MAX_DISCARD_ATTEMPTS) {
       startArenaIx = (int)((threadId + attempt) % arenaCount);
       destAllocIx =
@@ -327,18 +328,17 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
               -1);
       metrics.incrAllocationWithSplits((destAllocIx - prevAllocIx) * allocationSize);
       if (destAllocIx == dest.length) return;
-
-      if (attempt >= 5 && attempt < 15) {
-        long evicted = memoryManager.evictMemory(allocationSize << (attempt - 5));
+      if (attempt >= 2 && attempt < 10) {
+        long evicted = memoryManager.evictMemory(allocationSize << (attempt - 2));
         metrics.incAllocatorForceEvictedBytes(evicted);
-        metrics.incrAllocationEvictionAttempts(1);
-      } else if (attempt >= 15) {
-        long targetBlockSize = Math.min(maxAllocation, allocationSize << (attempt - 15) / 2);
+        metrics.incrAllocationEvictionAttempts(1); //this is to be removed probably
+      } else if (attempt >= 10) {
+        long targetBlockSize = Math.min(maxAllocation, allocationSize << (attempt - 10));
         int nBlocks = memoryManager.evictNBlocks(targetBlockSize, dest.length - destAllocIx);
         metrics.incAllocatorForceEvictedBlocksBytes(nBlocks * targetBlockSize);
+        metrics.incrAllocationEvictionAttempts(1); //this is to be removed probably
       }
       attempt++;
-      metrics.incrAllocationAttempt(1);
     }
 
     for (int i = 0; i < destAllocIx; ++i) {
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocatorMXBean.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocatorMXBean.java
index 276431cd07..016174dc27 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocatorMXBean.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocatorMXBean.java
@@ -60,6 +60,14 @@
    */
   long getMaxCacheSize();
 
+  /**
+   * @return number of allocated Arenas
+   */
+  default int getAllocatedArenaCount() {return -1;}
+
+  /**
+   * @return Aggregate of Total allocated byte requests
+   */
   default long getTotalAllocated() {
     return  -1;
   }
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
index 2c4c097105..1f276bea67 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
@@ -38,16 +38,15 @@
   CacheAllocatedArena("Number of arenas allocated"),
   CacheNumLockedBuffers("Number of locked buffers in cache"),
   AllocatorForceEvictedBlocksBytes("Total bytes evicted using an exact block size"),
-  AllocatorFreeListEvictedBytes("Total bytes evicted using free list discrad"),
+  AllocatorForcedEvictedBytes("Total bytes evicted using free list discard"),
   AllocatorTotalAllocated("Total Number of bytes allocated"),
   AllocatorFastAllocatedBytes("Total Number of fast allocated bytes"),
   CacheTotalReserved("Total Reserved bytes"),
-  AllocationWithSplits("AllocationWithSplits"),
-  AllocationWithExpand("AllocationWithExpand"),
-  AllocationFromFreeListDiscard("AllocationFromFreeListDiscard"),
-  AllocationFromBruteDiscard("AllocationFromBruteDiscard"),
-  AllocationAttempt("AllocationAttempt"),
-  CacheEvictedTotalBytes("Total evicted data by calling reserve");
+  AllocationWithSplits("Total amount of bytes allocated AllocationWithSplits"),
+  AllocationWithExpand("Total amount of bytes allocated with AllocationWithExpand"),
+  AllocationEvictionAttempts("Number of attempt to force evict memory"),
+  AllocationAttempt("Total number of call to allocation"),
+  CacheEvictedTotalBytes("Total graceful evicted bytes upon calling reserve");
   private final String desc;
 
   LlapDaemonCacheInfo(String desc) {
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
index 8aff717b02..3c0dbfbda4 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
@@ -18,12 +18,12 @@
 package org.apache.hadoop.hive.llap.metrics;
 
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationAttempt;
-import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationFromFreeListDiscard;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationEvictionAttempts;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationWithExpand;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationWithSplits;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorForceEvictedBlocksBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorFastAllocatedBytes;
-import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorFreeListEvictedBytes;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorForcedEvictedBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorTotalAllocated;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheAllocatedArena;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheCapacityRemaining;
@@ -193,14 +193,14 @@ private void getCacheStats(MetricsRecordBuilder rb) {
         .addCounter(CacheAllocatedArena, cacheAllocatedArena.value())
         .addCounter(CacheNumLockedBuffers, cacheNumLockedBuffers.value())
         .addCounter(AllocatorForceEvictedBlocksBytes, allocatorForceEvictedBlocksBytes.value())
-        .addCounter(AllocatorFreeListEvictedBytes, allocatorForcedEvictedBytes.value())
+        .addCounter(AllocatorForcedEvictedBytes, allocatorForcedEvictedBytes.value())
         .addCounter(AllocatorTotalAllocated, allocatorTotalAllocatedBytes.value())
         .addCounter(CacheEvictedTotalBytes, cacheEvictedBytesTotal.value())
         .addCounter(AllocatorFastAllocatedBytes, allocatorFastAllocBytes.value())
         .addCounter(CacheTotalReserved, cacheTotalReserved.value())
         .addCounter(AllocationWithSplits, allocationWithSplits.value())
         .addCounter(AllocationWithExpand, allocationWithExpand.value())
-        .addCounter(AllocationFromFreeListDiscard, allocationEvictionAttempts.value())
+        .addCounter(AllocationEvictionAttempts, allocationEvictionAttempts.value())
         .addCounter(AllocationAttempt, allocationAttempt.value())
         .addGauge(CacheHitRatio, cacheHitRatio);
   }
