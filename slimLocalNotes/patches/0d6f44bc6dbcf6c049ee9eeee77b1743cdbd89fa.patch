commit 0d6f44bc6dbcf6c049ee9eeee77b1743cdbd89fa
Author: Slim Bouguerra <bslim@apache.org>
Date:   Fri Mar 22 19:40:20 2019 -0700

    adding more counters to the amount of evictions
    
    Change-Id: I98a9abaee44e8dab0e711b2ccb5f45c4f66045df

diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
index 817bc591e3..1c4d6fab42 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
@@ -125,6 +125,7 @@ public boolean reserveMemory(final long memoryToReserve,
       reservedTotalMetric = 0;
     }
     metrics.incrCacheCapacityUsed(reservedTotalMetric - evictedTotalMetric);
+    metrics.incrCacheEvictedBytes(evictedTotalMetric);
     return result;
   }
 
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java
index 20f47ee0ac..0e9a1a4d66 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java
@@ -27,6 +27,7 @@
 import org.apache.hadoop.hive.llap.LlapUtil;
 import org.apache.hadoop.hive.llap.cache.LowLevelCache.Priority;
 import org.apache.hadoop.hive.llap.io.api.impl.LlapIoImpl;
+import org.apache.hadoop.hive.llap.io.metadata.MetadataCache;
 
 /**
  * Implementation of the algorithm from "On the Existence of a Spectrum of Policies
@@ -569,12 +570,22 @@ public void debugDumpShort(StringBuilder sb) {
     } else {
       LlapCacheableBuffer listItem = listHeadLocal;
       int c = 0;
+      long totalValidDataBytes = 0;
+      long totalValidMetadataBytes = 0;
+      int valid = 0;
       while (listItem != null) {
         ++c;
+        if (listItem instanceof LlapAllocatorBuffer && !((LlapAllocatorBuffer) listItem).isInvalid()) {
+          totalValidDataBytes += listItem.getMemoryUsage();
+          valid ++;
+        } else if (listItem instanceof MetadataCache.LlapMetadataBuffer && !((MetadataCache.LlapMetadataBuffer) listItem).isInvalid()) {
+          totalValidMetadataBytes += listItem.getMemoryUsage();
+          valid++;
+        }
         if (listItem == listTailLocal) break;
         listItem = listItem.next;
       }
-      sb.append(c + " items");
+      sb.append(c + " items, " + valid + " valid items\n"+ " total valid dataSize " + totalValidDataBytes + " ,total valid metadataSize " + totalValidMetadataBytes);
     }
     sb.append("\nLRFU eviction heap: " + heapSize + " items");
     if (parentDebugDump != null) {
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
index 6c919e9a1a..61a5e7f790 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
@@ -39,8 +39,8 @@
   CacheNumLockedBuffers("Number of locked buffers in cache"),
   AllocatorBruteForceEvictedBytes("Total bytes evicted using brute force discard"),
   AllocatorFreeListEvictedBytes("Total bytes evicted using free list discrad"),
-  AllocatorTotalAllocated("Total Number of bytes allocated");
-
+  AllocatorTotalAllocated("Total Number of bytes allocated"),
+  CacheEvictedTotalBytes("Total evicted data by policy");
   private final String desc;
 
   LlapDaemonCacheInfo(String desc) {
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
index c8776041b8..ed488937e2 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
@@ -25,6 +25,7 @@
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheCapacityRemainingPercentage;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheCapacityTotal;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheCapacityUsed;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheEvictedTotalBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheHitBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheHitRatio;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheMetrics;
@@ -75,6 +76,8 @@
   MutableCounterLong allocatorFreeListEvictedBytes;
   @Metric
   MutableCounterLong allocatorTotalAllocatedBytes;
+  @Metric
+  MutableCounterLong cacheEvictedBytesTotal;
 
   private LlapDaemonCacheMetrics(String name, String sessionId) {
     this.name = name;
@@ -174,7 +177,11 @@ private void getCacheStats(MetricsRecordBuilder rb) {
         .addCounter(AllocatorBruteForceEvictedBytes, allocatorForceEvictedBytes.value())
         .addCounter(AllocatorFreeListEvictedBytes, allocatorFreeListEvictedBytes.value())
         .addCounter(AllocatorTotalAllocated, allocatorTotalAllocatedBytes.value())
+        .addCounter(CacheEvictedTotalBytes, cacheEvictedBytesTotal.value())
         .addGauge(CacheHitRatio, cacheHitRatio);
   }
 
+  public void incrCacheEvictedBytes(long evictedTotalMetric) {
+    cacheEvictedBytesTotal.incr(evictedTotalMetric);
+  }
 }
