commit 3de0aff391b206519ddc47a10942b9487e18ad91
Author: Slim Bouguerra <bslim@apache.org>
Date:   Sat Mar 23 19:36:34 2019 -0700

    adding more counters to check why we have different numbers1
    
    Change-Id: Ib2cb75e440ccf473d878b4759f74d78ff31dfed1

diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
index f91c220a87..383fa8db29 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java
@@ -278,6 +278,7 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
     long threadId = arenaCount > 1 ? Thread.currentThread().getId() : 0;
     int destAllocIx = allocateFast(dest, null, 0, dest.length,
         freeListIx, allocationSize, (int)(threadId % arenaCount), arenaCount);
+    metrics.incAllocatorFastAllocation(destAllocIx * allocationSize);
     if (destAllocIx == dest.length) return;
 
     // We called reserveMemory so we know that there's memory waiting for us somewhere.
@@ -304,14 +305,18 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
       while (true) {
         // Try to split bigger blocks.
         int startArenaIx = (int)((threadId + attempt) % arenaCount);
+        int prevAllocIx = destAllocIx;
         destAllocIx = allocateWithSplit(dest, null, destAllocIx, dest.length,
             freeListIx, allocationSize, startArenaIx, arenaCount, -1);
+        metrics.incrAllocationWithSplits((destAllocIx - prevAllocIx ) * allocationSize);
         if (destAllocIx == dest.length) return;
 
         if (attempt == 0) {
           // Try to allocate memory if we haven't allocated all the way to maxSize yet; very rare.
+          prevAllocIx = destAllocIx;
           destAllocIx = allocateWithExpand(
               dest, destAllocIx, freeListIx, allocationSize, arenaCount);
+          metrics.incrAllocationWithExpand((destAllocIx - prevAllocIx ) * allocationSize);
           if (destAllocIx == dest.length) return;
         }
 
@@ -327,8 +332,10 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
           discardBlocksBasedOnFreeLists(freeListIx, startArenaIx, arenaCount, ctx);
           memoryFreeListReleased += ctx.memoryReleased;
           hasDiscardedAny = ctx.resultCount > 0;
+          prevAllocIx = destAllocIx;
           destAllocIx = allocateFromDiscardResult(
               dest, destAllocIx, freeListIx, allocationSize, ctx);
+          metrics.incrAllocationFromFreeListDiscard((destAllocIx - prevAllocIx ) * allocationSize);
           if (destAllocIx == dest.length) return;
         }
         // Then, try the brute force search for something to throw away.
@@ -337,8 +344,10 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
           discardBlocksBruteForce(freeListIx, startArenaIx, arenaCount, ctx);
           memoryBruteForceReleased += ctx.memoryReleased;
           hasDiscardedAny = hasDiscardedAny || (ctx.resultCount > 0);
+          prevAllocIx = destAllocIx;
           destAllocIx = allocateFromDiscardResult(
               dest, destAllocIx, freeListIx, allocationSize, ctx);
+          metrics.incrAllocationFromBruteDiscard((destAllocIx - prevAllocIx ) * allocationSize);
           if (destAllocIx == dest.length) return;
         }
 
@@ -360,6 +369,7 @@ public void allocateMultiple(MemoryBuffer[] dest, int size, BufferObjectFactory
           throw new AllocatorOutOfMemoryException(msg);
         }
         ++attempt;
+        metrics.incrAllocationAttempt(1);
       }
     } finally {
       metrics.incAllocatorBruteForceEvictedBytes(memoryBruteForceReleased);
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
index 1c4d6fab42..9a84897daa 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheMemoryManager.java
@@ -126,6 +126,7 @@ public boolean reserveMemory(final long memoryToReserve,
     }
     metrics.incrCacheCapacityUsed(reservedTotalMetric - evictedTotalMetric);
     metrics.incrCacheEvictedBytes(evictedTotalMetric);
+    metrics.incrCacheTotalReserved(reservedTotalMetric); // this will show if we are reserving as much as we have to allocate
     return result;
   }
 
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
index 61a5e7f790..261a964f15 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheInfo.java
@@ -40,6 +40,13 @@
   AllocatorBruteForceEvictedBytes("Total bytes evicted using brute force discard"),
   AllocatorFreeListEvictedBytes("Total bytes evicted using free list discrad"),
   AllocatorTotalAllocated("Total Number of bytes allocated"),
+  AllocatorFastAllocatedBytes("Total Number of fast allocated bytes"),
+  CacheTotalReserved("Total Reserved bytes"),
+  AllocationWithSplits("AllocationWithSplits"),
+  AllocationWithExpand("AllocationWithExpand"),
+  AllocationFromFreeListDiscard("AllocationFromFreeListDiscard"),
+  AllocationFromBruteDiscard("AllocationFromBruteDiscard"),
+  AllocationAttempt("AllocationAttempt"),
   CacheEvictedTotalBytes("Total evicted data by policy");
   private final String desc;
 
diff --git a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
index ed488937e2..c3e8fe7119 100644
--- a/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
+++ b/llap-server/src/java/org/apache/hadoop/hive/llap/metrics/LlapDaemonCacheMetrics.java
@@ -17,7 +17,13 @@
  */
 package org.apache.hadoop.hive.llap.metrics;
 
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationAttempt;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationFromBruteDiscard;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationFromFreeListDiscard;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationWithExpand;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocationWithSplits;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorBruteForceEvictedBytes;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorFastAllocatedBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorFreeListEvictedBytes;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.AllocatorTotalAllocated;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheAllocatedArena;
@@ -32,6 +38,7 @@
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheNumLockedBuffers;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheReadRequests;
 import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheRequestedBytes;
+import static org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheInfo.CacheTotalReserved;
 import static org.apache.hadoop.metrics2.impl.MsInfo.ProcessName;
 import static org.apache.hadoop.metrics2.impl.MsInfo.SessionId;
 
@@ -78,6 +85,20 @@
   MutableCounterLong allocatorTotalAllocatedBytes;
   @Metric
   MutableCounterLong cacheEvictedBytesTotal;
+  @Metric
+  MutableCounterLong allocatorFastAllocBytes;
+  @Metric
+  MutableCounterLong cacheTotalReserved;
+  @Metric
+  MutableCounterLong allocationWithSplits;
+  @Metric
+  MutableCounterLong allocationWithExpand;
+  @Metric
+  MutableCounterLong allocationFromFreeListDiscard;
+  @Metric
+  MutableCounterLong allocationFromBruteDiscard;
+  @Metric
+  MutableCounterLong allocationAttempt;
 
   private LlapDaemonCacheMetrics(String name, String sessionId) {
     this.name = name;
@@ -178,10 +199,45 @@ private void getCacheStats(MetricsRecordBuilder rb) {
         .addCounter(AllocatorFreeListEvictedBytes, allocatorFreeListEvictedBytes.value())
         .addCounter(AllocatorTotalAllocated, allocatorTotalAllocatedBytes.value())
         .addCounter(CacheEvictedTotalBytes, cacheEvictedBytesTotal.value())
+        .addCounter(AllocatorFastAllocatedBytes, allocatorFastAllocBytes.value())
+        .addCounter(CacheTotalReserved, cacheTotalReserved.value())
+        .addCounter(AllocationWithSplits, allocationWithSplits.value())
+        .addCounter(AllocationWithExpand, allocationWithExpand.value())
+        .addCounter(AllocationFromFreeListDiscard, allocationFromFreeListDiscard.value())
+        .addCounter(AllocationFromBruteDiscard, allocationFromBruteDiscard.value())
+        .addCounter(AllocationAttempt, allocationAttempt.value())
         .addGauge(CacheHitRatio, cacheHitRatio);
   }
 
   public void incrCacheEvictedBytes(long evictedTotalMetric) {
     cacheEvictedBytesTotal.incr(evictedTotalMetric);
   }
+
+  public void incAllocatorFastAllocation(long delta) {
+    allocatorFastAllocBytes.incr(delta);
+  }
+
+  public void incrCacheTotalReserved(long reservedTotalMetric) {
+    cacheTotalReserved.incr(reservedTotalMetric);
+  }
+
+  public void incrAllocationWithSplits(long delta) {
+    allocationWithSplits.incr(delta);
+  }
+
+  public void incrAllocationWithExpand(long delta) {
+    allocationWithExpand.incr(delta);
+  }
+
+  public void incrAllocationFromFreeListDiscard(long delta) {
+    allocationFromFreeListDiscard.incr(delta);
+  }
+
+  public void incrAllocationFromBruteDiscard(long delta) {
+    allocationFromBruteDiscard.incr(delta);
+  }
+
+  public void incrAllocationAttempt(long delta) {
+    allocationAttempt.incr(delta);
+  }
 }
